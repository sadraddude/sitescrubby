"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import type { WebsiteScore } from "@/lib/types"
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  Radar,
  Legend,
} from "recharts"
import {
  Search,
  Loader2,
  ExternalLink,
  Download,
  TrendingUp,
  TrendingDown,
  Minus,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Info,
  Eye,
  ArrowRight,
  BarChart2,
  PieChartIcon,
} from "lucide-react"

interface CompetitorAnalysisProps {
  businessName: string
  websiteScore?: WebsiteScore
  websiteUrl?: string
}

export function CompetitorAnalysis({ businessName, websiteScore, websiteUrl }: CompetitorAnalysisProps) {
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [competitors, setCompetitors] = useState<string[]>([])
  const [newCompetitor, setNewCompetitor] = useState("")
  const [activeTab, setActiveTab] = useState("overview")
  const [analysisComplete, setAnalysisComplete] = useState(false)

  // Mock competitor data (would be generated by AI/analysis in production)
  const competitorData = [
    {
      name: "Your Website",
      url: websiteUrl || "yourwebsite.com",
      overall: websiteScore?.overall || 65,
      seo: websiteScore?.seo || 60,
      mobile: websiteScore?.mobile || 70,
      security: websiteScore?.security || 65,
      performance: websiteScore?.performance || 55,
      design: websiteScore?.design || 60,
      content: websiteScore?.content || 70,
      contact: websiteScore?.contact || 75,
      strengths: ["Contact information", "Content quality"],
      weaknesses: ["Performance", "Security", "Design"],
      isYou: true,
    },
    {
      name: "Competitor A",
      url: "competitora.com",
      overall: 78,
      seo: 75,
      mobile: 80,
      security: 70,
      performance: 75,
      design: 85,
      content: 75,
      contact: 80,
      strengths: ["Design", "Mobile experience", "Performance"],
      weaknesses: ["Security"],
      isYou: false,
    },
    {
      name: "Competitor B",
      url: "competitorb.com",
      overall: 72,
      seo: 80,
      mobile: 65,
      security: 85,
      performance: 60,
      design: 70,
      content: 75,
      contact: 70,
      strengths: ["SEO", "Security"],
      weaknesses: ["Mobile experience", "Performance"],
      isYou: false,
    },
    {
      name: "Competitor C",
      url: "competitorc.com",
      overall: 58,
      seo: 55,
      mobile: 50,
      security: 60,
      performance: 65,
      design: 55,
      content: 60,
      contact: 65,
      strengths: ["Performance"],
      weaknesses: ["SEO", "Mobile experience", "Design"],
      isYou: false,
    },
  ]

  const handleAddCompetitor = () => {
    if (newCompetitor && !competitors.includes(newCompetitor)) {
      setCompetitors([...competitors, newCompetitor])
      setNewCompetitor("")
    }
  }

  const handleAnalyze = () => {
    setIsAnalyzing(true)

    // Simulate API call delay
    setTimeout(() => {
      setIsAnalyzing(false)
      setAnalysisComplete(true)
    }, 3000)
  }

  // Prepare data for charts
  const overallScoreData = competitorData.map((competitor) => ({
    name: competitor.name,
    score: competitor.overall,
    isYou: competitor.isYou,
  }))

  const categoryComparisonData = [
    {
      category: "SEO",
      you: competitorData[0].seo,
      competitor1: competitorData[1].seo,
      competitor2: competitorData[2].seo,
      competitor3: competitorData[3].seo,
    },
    {
      category: "Mobile",
      you: competitorData[0].mobile,
      competitor1: competitorData[1].mobile,
      competitor2: competitorData[2].mobile,
      competitor3: competitorData[3].mobile,
    },
    {
      category: "Security",
      you: competitorData[0].security,
      competitor1: competitorData[1].security,
      competitor2: competitorData[2].security,
      competitor3: competitorData[3].security,
    },
    {
      category: "Performance",
      you: competitorData[0].performance,
      competitor1: competitorData[1].performance,
      competitor2: competitorData[2].performance,
      competitor3: competitorData[3].performance,
    },
    {
      category: "Design",
      you: competitorData[0].design,
      competitor1: competitorData[1].design,
      competitor2: competitorData[2].design,
      competitor3: competitorData[3].design,
    },
    {
      category: "Content",
      you: competitorData[0].content,
      competitor1: competitorData[1].content,
      competitor2: competitorData[2].content,
      competitor3: competitorData[3].content,
    },
    {
      category: "Contact",
      you: competitorData[0].contact,
      competitor1: competitorData[1].contact,
      competitor2: competitorData[2].contact,
      competitor3: competitorData[3].contact,
    },
  ]

  const radarData = [
    { subject: "SEO", A: competitorData[0].seo, B: competitorData[1].seo, C: competitorData[2].seo, fullMark: 100 },
    {
      subject: "Mobile",
      A: competitorData[0].mobile,
      B: competitorData[1].mobile,
      C: competitorData[2].mobile,
      fullMark: 100,
    },
    {
      subject: "Security",
      A: competitorData[0].security,
      B: competitorData[1].security,
      C: competitorData[2].security,
      fullMark: 100,
    },
    {
      subject: "Performance",
      A: competitorData[0].performance,
      B: competitorData[1].performance,
      C: competitorData[2].performance,
      fullMark: 100,
    },
    {
      subject: "Design",
      A: competitorData[0].design,
      B: competitorData[1].design,
      C: competitorData[2].design,
      fullMark: 100,
    },
    {
      subject: "Content",
      A: competitorData[0].content,
      B: competitorData[1].content,
      C: competitorData[2].content,
      fullMark: 100,
    },
    {
      subject: "Contact",
      A: competitorData[0].contact,
      B: competitorData[1].contact,
      C: competitorData[2].contact,
      fullMark: 100,
    },
  ]

  // Helper function to get color based on score
  const getScoreColor = (score: number) => {
    if (score >= 80) return "text-green-500"
    if (score >= 60) return "text-yellow-500"
    if (score >= 40) return "text-orange-500"
    return "text-red-500"
  }

  const getScoreBgColor = (score: number) => {
    if (score >= 80) return "bg-green-500"
    if (score >= 60) return "bg-yellow-500"
    if (score >= 40) return "bg-orange-500"
    return "bg-red-500"
  }

  // Helper function to compare scores
  const compareScores = (yourScore: number, theirScore: number) => {
    const diff = yourScore - theirScore
    if (diff > 5) return { icon: <TrendingUp className="h-4 w-4 text-green-500" />, text: "Better" }
    if (diff < -5) return { icon: <TrendingDown className="h-4 w-4 text-red-500" />, text: "Worse" }
    return { icon: <Minus className="h-4 w-4 text-yellow-500" />, text: "Similar" }
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Competitor Analysis</CardTitle>
          <CardDescription>
            Compare your website against competitors to identify strengths and weaknesses
          </CardDescription>
        </CardHeader>
        <CardContent>
          {!analysisComplete ? (
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="your-website">Your Website</Label>
                <Input id="your-website" value={websiteUrl || ""} placeholder="e.g., yourwebsite.com" readOnly />
              </div>

              <div className="space-y-2">
                <div className="flex justify-between">
                  <Label htmlFor="competitor">Add Competitors</Label>
                  <span className="text-xs text-muted-foreground">{competitors.length}/5 added</span>
                </div>
                <div className="flex gap-2">
                  <Input
                    id="competitor"
                    value={newCompetitor}
                    onChange={(e) => setNewCompetitor(e.target.value)}
                    placeholder="e.g., competitor.com"
                    disabled={competitors.length >= 5}
                  />
                  <Button onClick={handleAddCompetitor} disabled={!newCompetitor || competitors.length >= 5}>
                    Add
                  </Button>
                </div>
              </div>

              {competitors.length > 0 && (
                <div className="space-y-2">
                  <Label>Competitors to Analyze</Label>
                  <div className="flex flex-wrap gap-2">
                    {competitors.map((competitor, index) => (
                      <Badge key={index} variant="outline" className="flex items-center gap-1">
                        {competitor}
                        <button
                          onClick={() => setCompetitors(competitors.filter((_, i) => i !== index))}
                          className="ml-1 text-gray-400 hover:text-gray-600"
                        >
                          <XCircle className="h-3 w-3" />
                        </button>
                      </Badge>
                    ))}
                  </div>
                </div>
              )}

              <div className="pt-4">
                <Button
                  onClick={handleAnalyze}
                  disabled={isAnalyzing || (!websiteUrl && competitors.length === 0)}
                  className="w-full"
                >
                  {isAnalyzing ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Analyzing Competitors...
                    </>
                  ) : (
                    <>
                      <Search className="mr-2 h-4 w-4" />
                      Analyze Competitors
                    </>
                  )}
                </Button>
              </div>
            </div>
          ) : (
            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
              <TabsList className="grid grid-cols-3 mb-4">
                <TabsTrigger value="overview">Overview</TabsTrigger>
                <TabsTrigger value="detailed">Detailed Comparison</TabsTrigger>
                <TabsTrigger value="insights">Strategic Insights</TabsTrigger>
              </TabsList>

              <TabsContent value="overview" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Overall Score Comparison</CardTitle>
                  </CardHeader>
                  <CardContent className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={overallScoreData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis domain={[0, 100]} />
                        <Tooltip />
                        <Bar
                          dataKey="score"
                          fill="#8884d8"
                          name="Overall Score"
                          barSize={40}
                          // Highlight your website
                          fill={(entry) => (entry.isYou ? "#4f46e5" : "#8884d8")}
                        />
                      </BarChart>
                    </ResponsiveContainer>
                  </CardContent>
                </Card>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <Card>
                    <CardHeader>
                      <CardTitle>Performance by Category</CardTitle>
                    </CardHeader>
                    <CardContent className="h-80">
                      <ResponsiveContainer width="100%" height="100%">
                        <RadarChart outerRadius={90} data={radarData}>
                          <PolarGrid />
                          <PolarAngleAxis dataKey="subject" />
                          <PolarRadiusAxis domain={[0, 100]} />
                          <Radar name="Your Website" dataKey="A" stroke="#4f46e5" fill="#4f46e5" fillOpacity={0.6} />
                          <Radar name="Competitor A" dataKey="B" stroke="#82ca9d" fill="#82ca9d" fillOpacity={0.6} />
                          <Radar name="Competitor B" dataKey="C" stroke="#ffc658" fill="#ffc658" fillOpacity={0.6} />
                          <Legend />
                        </RadarChart>
                      </ResponsiveContainer>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle>Competitive Position</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        <div>
                          <h3 className="text-sm font-medium mb-2">Your Strengths</h3>
                          <div className="flex flex-wrap gap-2">
                            {competitorData[0].strengths.map((strength, index) => (
                              <Badge key={index} className="bg-green-100 text-green-800">
                                {strength}
                              </Badge>
                            ))}
                          </div>
                        </div>

                        <div>
                          <h3 className="text-sm font-medium mb-2">Your Weaknesses</h3>
                          <div className="flex flex-wrap gap-2">
                            {competitorData[0].weaknesses.map((weakness, index) => (
                              <Badge key={index} className="bg-red-100 text-red-800">
                                {weakness}
                              </Badge>
                            ))}
                          </div>
                        </div>

                        <div>
                          <h3 className="text-sm font-medium mb-2">Market Position</h3>
                          <div className="p-3 bg-gray-50 rounded-md">
                            <div className="flex items-center justify-between mb-2">
                              <span className="text-sm">Your Overall Score:</span>
                              <span className={`font-medium ${getScoreColor(competitorData[0].overall)}`}>
                                {competitorData[0].overall}/100
                              </span>
                            </div>
                            <div className="flex items-center justify-between mb-2">
                              <span className="text-sm">Average Competitor Score:</span>
                              <span className="font-medium">
                                {Math.round(
                                  (competitorData[1].overall + competitorData[2].overall + competitorData[3].overall) /
                                    3,
                                )}
                                /100
                              </span>
                            </div>
                            <div className="flex items-center justify-between">
                              <span className="text-sm">Market Position:</span>
                              <span className="font-medium">
                                {competitorData[0].overall >
                                (competitorData[1].overall + competitorData[2].overall + competitorData[3].overall) / 3
                                  ? "Above Average"
                                  : "Below Average"}
                              </span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </TabsContent>

              <TabsContent value="detailed" className="space-y-4">
                <div className="overflow-x-auto">
                  <table className="w-full border-collapse">
                    <thead>
                      <tr className="border-b">
                        <th className="py-2 px-4 text-left font-medium">Category</th>
                        <th className="py-2 px-4 text-left font-medium">Your Score</th>
                        <th className="py-2 px-4 text-left font-medium">Competitor A</th>
                        <th className="py-2 px-4 text-left font-medium">Competitor B</th>
                        <th className="py-2 px-4 text-left font-medium">Competitor C</th>
                        <th className="py-2 px-4 text-left font-medium">Comparison</th>
                      </tr>
                    </thead>
                    <tbody>
                      {categoryComparisonData.map((category, index) => (
                        <tr key={index} className="border-b hover:bg-gray-50">
                          <td className="py-2 px-4 font-medium">{category.category}</td>
                          <td className="py-2 px-4">
                            <div className="flex items-center space-x-2">
                              <span className={`font-medium ${getScoreColor(category.you)}`}>{category.you}</span>
                              <Progress value={category.you} className={`h-2 w-16 ${getScoreBgColor(category.you)}`} />
                            </div>
                          </td>
                          <td className="py-2 px-4">
                            <div className="flex items-center space-x-2">
                              <span className="font-medium">{category.competitor1}</span>
                              <Progress
                                value={category.competitor1}
                                className={`h-2 w-16 ${getScoreBgColor(category.competitor1)}`}
                              />
                            </div>
                          </td>
                          <td className="py-2 px-4">
                            <div className="flex items-center space-x-2">
                              <span className="font-medium">{category.competitor2}</span>
                              <Progress
                                value={category.competitor2}
                                className={`h-2 w-16 ${getScoreBgColor(category.competitor2)}`}
                              />
                            </div>
                          </td>
                          <td className="py-2 px-4">
                            <div className="flex items-center space-x-2">
                              <span className="font-medium">{category.competitor3}</span>
                              <Progress
                                value={category.competitor3}
                                className={`h-2 w-16 ${getScoreBgColor(category.competitor3)}`}
                              />
                            </div>
                          </td>
                          <td className="py-2 px-4">
                            <div className="flex items-center space-x-1">
                              {
                                compareScores(
                                  category.you,
                                  (category.competitor1 + category.competitor2 + category.competitor3) / 3,
                                ).icon
                              }
                              <span className="text-sm">
                                {
                                  compareScores(
                                    category.you,
                                    (category.competitor1 + category.competitor2 + category.competitor3) / 3,
                                  ).text
                                }
                              </span>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {competitorData.slice(1).map((competitor, index) => (
                    <Card key={index}>
                      <CardHeader className="pb-2">
                        <CardTitle className="text-lg">{competitor.name}</CardTitle>
                        <CardDescription>
                          <a
                            href={`https://${competitor.url}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center text-blue-500 hover:underline"
                          >
                            {competitor.url}
                            <ExternalLink className="ml-1 h-3 w-3" />
                          </a>
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="pb-2">
                        <div className="space-y-3">
                          <div>
                            <div className="flex justify-between items-center mb-1">
                              <span className="text-sm">Overall Score</span>
                              <span className={`font-medium ${getScoreColor(competitor.overall)}`}>
                                {competitor.overall}/100
                              </span>
                            </div>
                            <Progress
                              value={competitor.overall}
                              className={`h-2 ${getScoreBgColor(competitor.overall)}`}
                            />
                          </div>

                          <div className="pt-2">
                            <h4 className="text-sm font-medium mb-1">Strengths</h4>
                            <div className="flex flex-wrap gap-1">
                              {competitor.strengths.map((strength, i) => (
                                <Badge key={i} variant="outline" className="bg-green-50">
                                  {strength}
                                </Badge>
                              ))}
                            </div>
                          </div>

                          <div>
                            <h4 className="text-sm font-medium mb-1">Weaknesses</h4>
                            <div className="flex flex-wrap gap-1">
                              {competitor.weaknesses.map((weakness, i) => (
                                <Badge key={i} variant="outline" className="bg-red-50">
                                  {weakness}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        </div>
                      </CardContent>
                      <CardFooter>
                        <Button variant="outline" size="sm" className="w-full">
                          <Eye className="h-4 w-4 mr-2" />
                          View Detailed Analysis
                        </Button>
                      </CardFooter>
                    </Card>
                  ))}
                </div>
              </TabsContent>

              <TabsContent value="insights" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Strategic Recommendations</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="p-4 border rounded-md bg-blue-50">
                        <h3 className="text-lg font-medium text-blue-700 mb-2">Competitive Advantage Opportunities</h3>
                        <p className="text-sm text-blue-600 mb-4">
                          Based on our analysis, these improvements will help you outperform competitors:
                        </p>
                        <div className="space-y-3">
                          {competitorData[0].weaknesses.map((weakness, index) => (
                            <div key={index} className="flex items-start">
                              <div className="bg-blue-100 text-blue-700 rounded-full w-6 h-6 flex items-center justify-center mr-3 mt-0.5">
                                {index + 1}
                              </div>
                              <div>
                                <h4 className="font-medium">{weakness} Improvement</h4>
                                <p className="text-sm text-gray-600">
                                  {weakness === "Performance" &&
                                    "Optimize page load speed to match or exceed Competitor A's performance metrics"}
                                  {weakness === "Security" &&
                                    "Implement security protocols similar to Competitor B to build customer trust"}
                                  {weakness === "Design" &&
                                    "Modernize design elements to compete with Competitor A's visual appeal"}
                                  {weakness === "SEO" &&
                                    "Enhance SEO strategy to match Competitor B's search visibility"}
                                  {weakness === "Mobile experience" &&
                                    "Improve mobile responsiveness to match industry leaders"}
                                </p>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="p-4 border rounded-md">
                          <h3 className="text-md font-medium mb-2 flex items-center">
                            <CheckCircle className="h-4 w-4 mr-2 text-green-500" />
                            Competitive Strengths to Leverage
                          </h3>
                          <ul className="space-y-2">
                            {competitorData[0].strengths.map((strength, index) => (
                              <li key={index} className="text-sm flex items-start">
                                <span className="text-green-500 mr-2">•</span>
                                <span>
                                  <span className="font-medium">{strength}:</span> Continue to emphasize this as a key
                                  differentiator in your marketing
                                </span>
                              </li>
                            ))}
                          </ul>
                        </div>

                        <div className="p-4 border rounded-md">
                          <h3 className="text-md font-medium mb-2 flex items-center">
                            <AlertTriangle className="h-4 w-4 mr-2 text-amber-500" />
                            Competitive Weaknesses to Address
                          </h3>
                          <ul className="space-y-2">
                            {competitorData[0].weaknesses.map((weakness, index) => (
                              <li key={index} className="text-sm flex items-start">
                                <span className="text-red-500 mr-2">•</span>
                                <span>
                                  <span className="font-medium">{weakness}:</span> Prioritize improvements to close the
                                  gap with leading competitors
                                </span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      </div>

                      <div className="p-4 border rounded-md">
                        <h3 className="text-md font-medium mb-3 flex items-center">
                          <BarChart2 className="h-4 w-4 mr-2 text-purple-500" />
                          Market Positioning Strategy
                        </h3>
                        <div className="space-y-3">
                          <p className="text-sm">
                            Based on competitive analysis, we recommend the following positioning strategy:
                          </p>
                          <div className="flex items-start">
                            <Info className="h-5 w-5 mr-2 text-blue-500 flex-shrink-0 mt-0.5" />
                            <p className="text-sm">
                              <span className="font-medium">Current Position:</span> Your website currently ranks below
                              the industry average in key areas including {competitorData[0].weaknesses.join(", ")}.
                            </p>
                          </div>
                          <div className="flex items-start">
                            <ArrowRight className="h-5 w-5 mr-2 text-green-500 flex-shrink-0 mt-0.5" />
                            <p className="text-sm">
                              <span className="font-medium">Recommended Position:</span> Focus on your strengths in{" "}
                              {competitorData[0].strengths.join(" and ")} while addressing critical weaknesses to create
                              a more competitive website that stands out in your market.
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <div className="flex justify-end">
                  <Button variant="outline" className="mr-2">
                    <Download className="h-4 w-4 mr-2" />
                    Export Analysis
                  </Button>
                  <Button>
                    <PieChartIcon className="h-4 w-4 mr-2" />
                    Generate Full Report
                  </Button>
                </div>
              </TabsContent>
            </Tabs>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
